class CNNM(nn.Module):
    def __init__(self):
        super().__init__()
        self.mp = nn.MaxPool2d(2)
        self.flt = nn.Flatten()
        self.ln = nn.LayerNorm((1, 128, 400))
        self.b1 = nn.BatchNorm2d(1)
        self.c1 = nn.Conv2d(in_channels = 1, out_channels = 9, kernel_size = 3) #126 398 -> 63 199
        self.b2 = nn.BatchNorm2d(9)
        self.c2 = nn.Conv2d(in_channels = 9, out_channels = 18, kernel_size = 2) #62 198 -> 31 99
        self.b3 = nn.BatchNorm2d(18)
        self.c3 = nn.Conv2d(in_channels = 18, out_channels = 36, kernel_size = 4) #28 -> 96 -> 14 48
        self.b4 = nn.BatchNorm2d(36)
        self.c4 = nn.Conv2d(in_channels = 36, out_channels = 36, kernel_size = 3, padding = 1) #14 
        self.c5 = nn.Conv2d(in_channels = 36, out_channels = 36, kernel_size = 3, padding = 1)
        self.c6 = nn.Conv2d(in_channels = 36, out_channels = 18, kernel_size = 3, padding = 1)

        self.l1 = nn.Linear(14 * 48 * 18, 3000)
        self.bl1 = nn.BatchNorm1d(3000)
        self.d1 = nn.Dropout(p=0.4)
        self.l2 = nn.Linear(3000, 3000)
        self.bl2 = nn.BatchNorm1d(3000)
        self.d2 = nn.Dropout(p=0.4)
        self.l3 = nn.Linear(3000, 500)
        self.bl3 = nn.BatchNorm1d(500)
        self.d3 = nn.Dropout(p=0.4)
        self.l4 = nn.Linear(500, 100)
        self.bl4 = nn.BatchNorm1d(100)
        self.d4 = nn.Dropout(p=0.4)
        self.l5 = nn.Linear(100, 15)
        self.d5 = nn.Dropout(p=0.4)
        self.l6 = nn.Linear(15, 2)
        self.d6 = nn.Dropout(p=0.4)
        self.f1 = nn.Softmax(dim = 1)

    def forward(self, x):
        x = -x
        x = x.reshape(x.shape[0], 1, 128, 400)
        x = self.b1(x)
        x = self.ln(x)
        x = F.relu(self.c1(x))
        x = self.mp(x)
        x = self.b2(x)
        x = F.relu(self.c2(x))
        x = self.mp(x)
        x = self.b3(x)
        x = F.relu(self.c3(x))
        x = self.mp(x)
        x = self.b4(x)
        x = F.relu(self.c4(x))
        x = F.relu(self.c5(x))
        x = F.relu(self.c6(x))
        x = self.flt(x)
        
        x = F.relu(self.l1(x))
        x = self.d1(x)
        x = F.relu(self.l2(x))
        x = self.d2(x)
        x = F.relu(self.l3(x))
        x = self.d3(x)
        x = F.relu(self.l4(x))
        x = self.d4(x)
        x = F.relu(self.l5(x))
        x = self.d5(x)
        x = F.relu(self.l6(x))
        x = self.d6(x)
        x = self.f1(x)

        return x